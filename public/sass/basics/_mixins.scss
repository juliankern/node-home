@mixin global-focus {
    transition: box-shadow .5s;
    box-shadow: 0 0 0 transparent;

    &:focus {
        outline: 0;
        box-shadow: 0 0 5px color(primary);
    }
}
@mixin contrastText($color) {
    @if (lightness($color) > 60) {
        color: #000; // Lighter backgorund, return dark color
    }

    @else {
        color: #fff; // Darker background, return light color
    }
}
@mixin hover-focus {
    &:focus,
    &:hover {
        @content;
    }
}
@mixin hover {
    &:hover {
        @content;
    }
}
@mixin border-radius($radius: $border-radius) {
    @if $enable-rounded {
        border-radius: $radius;
    }
}
@mixin border-top-radius($radius) {
    @if $enable-rounded {
        border-top-left-radius: $radius;
        border-top-right-radius: $radius;
    }
}
@mixin border-right-radius($radius) {
    @if $enable-rounded {
        border-top-right-radius: $radius;
        border-bottom-right-radius: $radius;
    }
}
@mixin border-bottom-radius($radius) {
    @if $enable-rounded {
        border-bottom-right-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}
@mixin border-left-radius($radius) {
    @if $enable-rounded {
        border-top-left-radius: $radius;
        border-bottom-left-radius: $radius;
    }
}

// ///////////////////////////////

@function px2rem($pixel) {
    @return #{strip-unit($pixel)/strip-unit($font-size-base)}rem;
}

/// Remove the unit of a length
/// @param {Number} $number - Number to remove unit from
/// @return {Number} - Unitless number

@function strip-unit($number) {
    @if type-of($number) == 'number' and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}
